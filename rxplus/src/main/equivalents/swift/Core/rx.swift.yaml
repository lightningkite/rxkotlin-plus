---


# Observables


- id: io.reactivex.rxjava3.core.Observable
  type: type
  typeArgumentNames: [Element]
  template:
    pattern: Observable<~T0~>
    imports:
      - RxSwift

- id: io.reactivex.rxjava3.core.Observable
  type: typeRef
  template:
    pattern: Observable
    imports:
      - RxSwift
#
#- id: io.reactivex.rxjava3.core.Observable.subscribe
#  type: call
#  arguments: [io.reactivex.rxjava3.core.Observer]
#  template: ~this~.subscribe(~0~)

- id: io.reactivex.rxjava3.core.Observable.mergeWith
  type: call
  template: 'Observable.merge(~this~, ~0~)'

- id: io.reactivex.rxjava3.core.Observable.subscribe
  type: call
  arguments: [io.reactivex.rxjava3.functions.Consumer]
  template: '~this~.subscribe(onNext: ~0~)'

- id: io.reactivex.rxjava3.core.Observable.subscribe
  type: call
  template: '~this~.subscribe(onNext: ~0~, onError: ~1~, onCompleted: ~1~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  receiver: io.reactivex.rxjava3.core.Observable
  suppliedArguments: [onNext, onError, onComplete]
  template: '~this~.subscribe(onNext: ~onNext~, onError: ~onError~, onCompleted: ~onComplete~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  receiver: io.reactivex.rxjava3.core.Observable
  suppliedArguments: [onNext, onError]
  template: '~this~.subscribe(onNext: ~onNext~, onError: ~onError~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  receiver: io.reactivex.rxjava3.core.Observable
  suppliedArguments: [onNext, onComplete]
  template: '~this~.subscribe(onNext: ~onNext~, onCompleted: ~onComplete~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  receiver: io.reactivex.rxjava3.core.Observable
  suppliedArguments: [onError, onComplete]
  template: '~this~.subscribe(onError: ~onError~, onCompleted: ~onComplete~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  receiver: io.reactivex.rxjava3.core.Observable
  suppliedArguments: [onNext]
  template: '~this~.subscribe(onNext: ~onNext~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  receiver: io.reactivex.rxjava3.core.Observable
  suppliedArguments: [onError]
  template: '~this~.subscribe(onError: ~onError~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  receiver: io.reactivex.rxjava3.core.Observable
  suppliedArguments: [onComplete]
  template: '~this~.subscribe(onCompleted: ~onComplete~)'

## Operators
- id: io.reactivex.rxjava3.core.Observable.singleOrError
  type: call
  template:
    pattern: '~this~.asSingle()'
    imports: [RxSwift]
- id: io.reactivex.rxjava3.core.Observable.timeout
  type: call
  template:
    pattern: '~this~.timeout(.milliseconds(~0~), scheduler: MainScheduler.instance)'
    imports: [RxSwift]
- id: io.reactivex.rxjava3.core.Observable.debounce
  type: call
  template:
    pattern: '~this~.debounce(.milliseconds(~0~), scheduler: MainScheduler.instance)'
    imports: [RxSwift]
- id: io.reactivex.rxjava3.core.Observable.distinctUntilChanged
  type: call
  arguments: []
  template:
    pattern: '~this~.distinctUntilChanged()'
    imports: [RxSwift]
- id: io.reactivex.rxjava3.core.Observable.distinct
  type: call
  arguments: []
  template:
    pattern: '~this~.distinct()'
    imports: [RxSwift]
- id: io.reactivex.rxjava3.core.Observable.distinctUntilChanged
  type: call
  template:
    pattern: '~this~.distinctUntilChanged(~0~)'
    imports: [RxSwift]

- id: io.reactivex.rxjava3.core.Observable.onErrorResumeNext
  type: call
  template:
    pattern: '~this~.catchError(~0~)'
    imports: [RxSwift]
- id: io.reactivex.rxjava3.core.Single.onErrorResumeNext
  type: call
  template:
    pattern: '~this~.catchError(~0~)'
    imports: [RxSwift]
- id: io.reactivex.rxjava3.core.Observable.onErrorReturnItem
  type: call
  template:
    pattern: '~this~.catchError { _ in Observable.just(~0~) }'
    imports: [RxSwift]
- id: io.reactivex.rxjava3.core.Single.onErrorReturnItem
  type: call
  template:
    pattern: '~this~.catchError { _ in Single.just(~0~) }'
    imports: [RxSwift]
- id: io.reactivex.rxjava3.core.Observable.onErrorResumeNext
  type: call
  arguments: [io.reactivex.rxjava3.core.ObservableSource]
  template:
    pattern: '~this~.catchError { _ in ~0~ }'
    imports: [RxSwift]
- id: io.reactivex.rxjava3.core.Single.onErrorResumeNext
  type: call
  arguments: [io.reactivex.rxjava3.core.ObservableSource]
  template:
    pattern: '~this~.catchError { _ in ~0~ }'
    imports: [RxSwift]

- id: io.reactivex.rxjava3.core.ObservableSource
  type: type
  template:
    pattern: Observable<~T0~>
    imports: [RxSwift]
- id: io.reactivex.rxjava3.core.SingleSource
  type: type
  template:
    pattern: Single<~T0~>
    imports: [RxSwift]


- id: io.reactivex.rxjava3.core.Observable.fromIterable
  type: call
  template:
    pattern: Observable.from(~0~)
    imports: [RxSwift]

- id: io.reactivex.rxjava3.core.Observable.publish
  type: call
  template:
    pattern: ~this~.publish()
    imports: [RxSwift]

- id: io.reactivex.rxjava3.subjects.Subject.hasObservers
  type: call
  template:
    pattern: ~this~.hasObservers
    imports: [RxSwift]

- id: io.reactivex.rxjava3.core.Observable.interval
  type: call
  template:
    pattern: "Observable<Int>.interval(RxTimeInterval.milliseconds(Int(~0~)), scheduler: ~2~)"
    imports: [RxSwift]

- id: io.reactivex.rxjava3.core.Observable.flatMapSingle
  type: call
  template:
    pattern: ~this~.flatMap(~0~)
    imports: [RxSwift]

- id: io.reactivex.rxjava3.core.Observable.switchMapSingle
  type: call
  template:
    pattern: ~this~.flatMap(~0~)
    imports: [RxSwift]

- id: io.reactivex.rxjava3.core.Observable.flatMapMaybe
  type: call
  template:
    pattern: ~this~.flatMap(~0~)
    imports: [RxSwift]

- id: io.reactivex.rxjava3.core.Observable.switchMapMaybe
  type: call
  template:
    pattern: ~this~.flatMap(~0~)
    imports: [RxSwift]

- id: io.reactivex.rxjava3.core.Single.flatMapObservable
  type: call
  template:
    pattern: ~this~.asObservable().flatMap(~0~)
    imports: [RxSwift]

- id: io.reactivex.rxjava3.core.Single.switchMapObservable
  type: call
  template:
    pattern: ~this~.asObservable().flatMap(~0~)
    imports: [RxSwift]

- id: io.reactivex.rxjava3.core.Observable.startWithItem
  type: call
  template: ~this~.startWith(~0~)

- id: io.reactivex.rxjava3.observables.ConnectableObservable.refCount
  type: call
  template: "~this~.refCount()"

# Observer
- id: io.reactivex.rxjava3.core.Observer
  type: type
  template:
    pattern: AnyObserver<~T0~>
    imports: [RxSwift]

- id: io.reactivex.rxjava3.core.Observer.onNext
  type: call
  template: ~this~.onNext(~0~)

- id: io.reactivex.rxjava3.core.Observer.onError
  type: call
  template: ~this~.onError(~0~)

- id: io.reactivex.rxjava3.core.Observer.onComplete
  type: call
  template: ~this~.onComplete()
#
## ObservableEmitter
#- id: io.reactivex.rxjava3.core.ObservableEmitter
#  type: type
#  template:
#    pattern: Observer<~T0~>
#    imports:
#      Observer: rxjs


# Single

- id: io.reactivex.rxjava3.core.Single
  type: type
  typeArgumentNames: [Element]
  constraintTemplate: 'PrimitiveSequenceType where Trait == SingleTrait'
  template:
    pattern: Single<~T0~>
    imports:
      - RxSwift

- id: io.reactivex.rxjava3.core.Single
  type: typeRef
  template:
    pattern: Single
    imports:
      - RxSwift

#- id: io.reactivex.rxjava3.core.Single.subscribe
#  type: call
#  arguments: [io.reactivex.rxjava3.core.Observer]
#  template: ~this~.subscribe(~0~)

- id: io.reactivex.rxjava3.core.Single.subscribe
  type: call
  template: '~this~.subscribe(onSuccess: ~0~, onError: ~1~)'

- id: io.reactivex.rxjava3.core.Single.subscribe
  type: call
  arguments: [io.reactivex.rxjava3.functions.Consumer]
  template: '~this~.subscribe(onSuccess: ~0~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  suppliedArguments: [onSuccess, onError]
  receiver: io.reactivex.rxjava3.core.Single
  template: '~this~.subscribe(onSuccess: ~onSuccess~, onError: ~onError~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  suppliedArguments: [onSuccess]
  receiver: io.reactivex.rxjava3.core.Single
  template: '~this~.subscribe(onSuccess: ~onSuccess~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  suppliedArguments: [onError]
  receiver: io.reactivex.rxjava3.core.Single
  template: '~this~.subscribe(onError: ~onError~)'
#
## Operators for Single

- id: io.reactivex.rxjava3.core.Single.zip
  type: call
  template:
    pattern: '~this~.zip(~0~, resultSelector: ~1~)'
    imports: [RxSwift]

- id: io.reactivex.rxjava3.core.Single.zip
  type: call
  arguments: [SingleSource, SingleSource, BiFunction]
  template:
    pattern: '~this~.zip(~0~, ~1~, resultSelector: ~2~)'
    imports: [RxSwift]

- id: io.reactivex.rxjava3.core.Single.zip
  type: call
  arguments: [SingleSource, SingleSource, SingleSource, BiFunction]
  template:
    pattern: '~this~.zip(~0~, ~1~, ~2~, resultSelector: ~3~)'
    imports: [RxSwift]

#
- id: io.reactivex.rxjava3.core.SingleEmitter.onError
  type: call
  template: ~this~.onFailure(~0~)


# Completable

- id: io.reactivex.rxjava3.core.Completable
  type: type
  template:
    pattern: Completable
    imports:
      - RxSwift

#- id: io.reactivex.rxjava3.core.Completable.subscribe
#  type: call
#  arguments: [io.reactivex.rxjava3.core.Observer]
#  template: ~this~.subscribe(~0~)

- id: io.reactivex.rxjava3.core.Completable.subscribe
  type: call
  template: '~this~.subscribe(onSuccess: ~0~, onError: ~1~)'

- id: io.reactivex.rxjava3.core.Completable.subscribe
  type: call
  arguments: [io.reactivex.rxjava3.functions.Consumer]
  template: '~this~.subscribe(onSuccess: ~0~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  suppliedArguments: [onSuccess, onError]
  receiver: io.reactivex.rxjava3.core.Completable
  template: '~this~.subscribe(onSuccess: ~onSuccess~, onError: ~onError~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  suppliedArguments: [onSuccess]
  receiver: io.reactivex.rxjava3.core.Completable
  template: '~this~.subscribe(onSuccess: ~onSuccess~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  suppliedArguments: [onError]
  receiver: io.reactivex.rxjava3.core.Completable
  template: '~this~.subscribe(onError: ~onError~)'

## Operators for Completable

- id: io.reactivex.rxjava3.core.Completable.zip
  type: call
  template:
    pattern: '~this~.zip(~0~, resultSelector: ~1~)'
    imports: [RxSwift]

- id: io.reactivex.rxjava3.core.Completable.zip
  type: call
  arguments: [CompletableSource, CompletableSource, BiFunction]
  template:
    pattern: '~this~.zip(~0~, ~1~, resultSelector: ~2~)'
    imports: [RxSwift]

- id: io.reactivex.rxjava3.core.Completable.zip
  type: call
  arguments: [CompletableSource, CompletableSource, CompletableSource, BiFunction]
  template:
    pattern: '~this~.zip(~0~, ~1~, ~2~, resultSelector: ~3~)'
    imports: [RxSwift]

#
- id: io.reactivex.rxjava3.core.CompletableEmitter.onError
  type: call
  template: ~this~.onFailure(~0~)

- type: "call"
  id: "io.reactivex.rxjava3.core.Completable.toSingleDefault"
  template:
    pattern: "~this~.asObservable().map { _ in fatalError() }.concat(Observable.just()).asSingle()"

- type: "call"
  id: "io.reactivex.rxjava3.core.Single.ignoreElement"
  template:
    pattern: "~this~.asCompletable()"

# Maybe

- id: io.reactivex.rxjava3.core.Maybe
  type: type
  constraintTemplate: 'PrimitiveSequenceType where Trait == MaybeTrait'
  template:
    pattern: Maybe<~T0~>
    imports: [RxSwift]

- id: io.reactivex.rxjava3.core.Maybe.subscribe
  type: call
  arguments: [io.reactivex.rxjava3.functions.Consumer]
  template: '~this~.subscribe(onSuccess: ~0~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  receiver: io.reactivex.rxjava3.core.Maybe
  suppliedArguments: [onSuccess, onError, onComplete]
  template: '~this~.subscribe(onSuccess: ~onSuccess~, onError: ~onError~, onCompleted: ~onComplete~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  receiver: io.reactivex.rxjava3.core.Maybe
  suppliedArguments: [onSuccess, onError]
  template: '~this~.subscribe(onSuccess: ~onSuccess~, onError: ~onError~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  receiver: io.reactivex.rxjava3.core.Maybe
  suppliedArguments: [onSuccess, onComplete]
  template: '~this~.subscribe(onSuccess: ~onSuccess~, onCompleted: ~onComplete~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  receiver: io.reactivex.rxjava3.core.Maybe
  suppliedArguments: [onError, onComplete]
  template: '~this~.subscribe(onError: ~onError~, onCompleted: ~onComplete~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  receiver: io.reactivex.rxjava3.core.Maybe
  suppliedArguments: [onSuccess]
  template: '~this~.subscribe(onSuccess: ~onSuccess~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  receiver: io.reactivex.rxjava3.core.Maybe
  suppliedArguments: [onError]
  template: '~this~.subscribe(onError: ~onError~)'

- id: io.reactivex.rxjava3.kotlin.subscribeBy
  type: call
  receiver: io.reactivex.rxjava3.core.Maybe
  suppliedArguments: [onComplete]
  template: '~this~.subscribe(onCompleted: ~onComplete~)'

# Disposable

- id: io.reactivex.rxjava3.disposables.Disposable
  type: type
  template:
    pattern: Disposable
    imports:
      - RxSwift

- id: io.reactivex.rxjava3.disposables.CompositeDisposable
  type: type
  template:
    pattern: DisposeBag
    imports:
      - RxSwift

- id: io.reactivex.rxjava3.disposables.CompositeDisposable.add
  type: call
  template: ~this~.insert(~0~)

- id: io.reactivex.rxjava3.disposables.Disposable.fromAction
  type: call
  template:
    pattern: 'Disposables.create(with: ~0~)'
    imports:
      - RxSwift

#- id: io.reactivex.rxjava3.disposables.Disposable.dispose
#  type: call
#  template: ~this~.unsubscribe()
#
#- id: io.reactivex.rxjava3.disposables.Disposable.isDisposed
#  type: call
#  template: ~this~.closed
#
#- id: io.reactivex.rxjava3.disposables.Disposable.disposed
#  type: get
#  template: ~this~.closed

# Subjects

- id: io.reactivex.rxjava3.subjects.Subject
  type: type
  typeArgumentNames: [Element]
  template:
    pattern: Subject<~T0~>
    imports: [RxSwift]
- id: io.reactivex.rxjava3.subjects.PublishSubject
  type: type
  typeArgumentNames: [Element]
  template:
    pattern: PublishSubject<~T0~>
    imports: [RxSwift]
- id: io.reactivex.rxjava3.subjects.PublishSubject.create
  type: call
  template:
    pattern: PublishSubject()
    imports: [RxSwift]


- id: io.reactivex.rxjava3.subjects.BehaviorSubject
  type: type
  typeArgumentNames: [Element]
  template:
    pattern: BehaviorSubject<~T0~>
    imports: [ RxSwift ]
- id: io.reactivex.rxjava3.subjects.BehaviorSubject.create
  type: call
  template:
    pattern: BehaviorSubject()
    imports: [ RxSwift ]
- id: io.reactivex.rxjava3.subjects.BehaviorSubject.createDefault
  type: call
  template:
    pattern: 'BehaviorSubject(value: ~0~)'
    imports: [ RxSwift ]


- id: io.reactivex.rxjava3.schedulers.Schedulers.io
  type: call
  template:
    pattern: 'ConcurrentDispatchQueueScheduler.init(qos: .background)'
    imports: [RxSwift]

- id: io.reactivex.rxjava3.android.schedulers.AndroidSchedulers.mainThread
  type: call
  template:
    pattern: 'MainScheduler.instance'
    imports: [RxSwift]

- id: org.reactivestreams.Publisher
  type: type
  template:
    pattern: 'Observable<~T0~>'
    imports: [RxSwift]
- id: org.reactivestreams.Publisher
  type: typeRef
  template:
    pattern: 'Observable'
    imports: [RxSwift]

- id: io.reactivex.rxjava3.core.Observable.delay
  type: call
  exactArgumentRequirements: { 1: TimeUnit.MILLISECONDS }
  template:
    pattern: '~this~.delay(.milliseconds(~0~), scheduler: MainScheduler.instance)'
    imports: [RxSwift]
- id: io.reactivex.rxjava3.core.Single.delay
  type: call
  exactArgumentRequirements: { 1: TimeUnit.MILLISECONDS }
  template:
    pattern: '~this~.delay(.milliseconds(~0~), scheduler: MainScheduler.instance)'
    imports: [RxSwift]
- id: io.reactivex.rxjava3.core.Completable.delay
  type: call
  exactArgumentRequirements: { 1: TimeUnit.MILLISECONDS }
  template:
    pattern: '~this~.delay(.milliseconds(~0~), scheduler: MainScheduler.instance)'
    imports: [RxSwift]
- id: io.reactivex.rxjava3.core.Flowable.delay
  type: call
  exactArgumentRequirements: { 1: TimeUnit.MILLISECONDS }
  template:
    pattern: '~this~.delay(.milliseconds(~0~), scheduler: MainScheduler.instance)'
    imports: [RxSwift]

- id: io.reactivex.rxjava3.core.Observable.retryWhen
  type: call
  template: '~this~.retry(when: ~0~)'

- id: io.reactivex.rxjava3.core.Single.retryWhen
  type: call
  template: '~this~.retry(when: ~0~)'

- id: io.reactivex.rxjava3.core.Maybe.retryWhen
  type: call
  template: '~this~.retry(when: ~0~)'
